use database::schema::provinces;
use database::schema::districts;
use database::schema::sub_districts;
use diesel::*;
use diesel::pg::PgConnection;
use diesel::prelude::RunQueryDsl;
use diesel::dsl::sql_query;
use diesel::result::Error;

#[derive(Serialize, Deserialize, QueryableByName)]
pub struct Area {
  #[sql_type = "Text"]
  pub province_name: String,
  #[sql_type = "Text"]
  pub district_name: Option<String>,
  #[sql_type = "Text"]  
  pub sub_district_name: Option<String>,
  #[sql_type = "Text"]  
  pub sub_district_id: Option<String>
}

impl Area {
  pub fn read(connection: &PgConnection) -> Result<Vec<Area>, Error> {
    sql_query("SELECT concat_ws(',', provinces.name, districts.name, sub_districts.name) as sub_district_name, sub_districts.id as sub_district_id FROM provinces LEFT JOIN districts ON provinces.id = districts.province_id LEFT JOIN sub_districts ON districts.id = sub_districts.district_id")
    .get_results(connection)
  }
}
